isbin = true
width = 7
height = 11
from = 32
to = 128

font = {
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 32 (SPC)
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 33
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 34
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 35
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 36
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 37
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 38
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 39
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 40
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 41
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 42
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 43
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 44
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 45
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0011000",
"0b0011000",
"0b0000000", --  ASCII(46) .
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 47
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100010",
"0b0100110",
"0b0101010",
"0b0110010",
"0b0100010",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(48) 0
"0b0000000",
"0b0001000",
"0b0011000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0011100",
"0b0000000", --  ASCII(49) 1
"0b0000000",
"0b0011100",
"0b0100010",
"0b0000010",
"0b0000010",
"0b0000100",
"0b0001000",
"0b0010000",
"0b0100000",
"0b0111110",
"0b0000000", --  ASCII(50) 2
"0b0000000",
"0b0011100",
"0b0100010",
"0b0000010",
"0b0000010",
"0b0001100",
"0b0000010",
"0b0000010",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(51) 3
"0b0000000",
"0b0001100",
"0b0010100",
"0b0010100",
"0b0100100",
"0b0100100",
"0b0100100",
"0b0111110",
"0b0000100",
"0b0000100",
"0b0000000", --  ASCII(52) 4
"0b0000000",
"0b0111110",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0111100",
"0b0000010",
"0b0000010",
"0b0000010",
"0b0111100",
"0b0000000", --  ASCII(53) 5
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100000",
"0b0100000",
"0b0111100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(54) 6
"0b0000000",
"0b0111110",
"0b0000010",
"0b0000010",
"0b0000100",
"0b0000100",
"0b0001000",
"0b0001000",
"0b0010000",
"0b0010000",
"0b0000000", --  ASCII(55) 7
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0011100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(56) 8
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0011110",
"0b0000010",
"0b0000010",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(57) 9
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 58
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 59
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 60
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 61
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 62
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 63
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 64
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0111110",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0000000", --  ASCII(65) A
"0b0000000",
"0b0111100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0111100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0111100",
"0b0000000", --  ASCII(66) B
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(67) C
"0b0000000",
"0b0111100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0111100",
"0b0000000", --  ASCII(68) D
"0b0000000",
"0b0111110",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0111100",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0111110",
"0b0000000", --  ASCII(69) E
"0b0000000",
"0b0111110",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0111100",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0000000", --  ASCII(70) F
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100000",
"0b0100000",
"0b0101110",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(71) G
"0b0000000",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0111110",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0000000", --  ASCII(72) H
"0b0000000",
"0b0011100",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0011100",
"0b0000000", --  ASCII(73) I
"0b0000000",
"0b0000010",
"0b0000010",
"0b0000010",
"0b0000010",
"0b0000010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(74) J
"0b0000000",
"0b0100010",
"0b0100100",
"0b0101000",
"0b0110000",
"0b0100000",
"0b0110000",
"0b0101000",
"0b0100100",
"0b0100010",
"0b0000000", --  ASCII(75) K
"0b0000000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0111110",
"0b0000000", --  ASCII(76) L
"0b0000000",
"0b0100010",
"0b0100010",
"0b0110110",
"0b0101010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0000000", --  ASCII(77) M
"0b0000000",
"0b0100010",
"0b0100010",
"0b0110010",
"0b0101010",
"0b0101010",
"0b0100110",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0000000", --  ASCII(78) N
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(79) O
"0b0000000",
"0b0111100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0111100",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0000000", --  ASCII(80) P
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0101010",
"0b0100110",
"0b0011110",
"0b0000000", --  ASCII(81) Q
"0b0000000",
"0b0111100",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0111100",
"0b0101000",
"0b0100100",
"0b0100010",
"0b0100010",
"0b0000000", --  ASCII(82) R
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100000",
"0b0100000",
"0b0011100",
"0b0000010",
"0b0000010",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(83) S
"0b0000000",
"0b0111110",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0000000", --  ASCII(84) T
"0b0000000",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0011100",
"0b0000000", --  ASCII(85) U
"0b0000000",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0010100",
"0b0010100",
"0b0001000",
"0b0000000", --  ASCII(86) V
"0b0000000",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0100010",
"0b0101010",
"0b0101010",
"0b0101010",
"0b0011100",
"0b0000000", --  ASCII(87) W
"0b0000000",
"0b0100010",
"0b0100010",
"0b0010100",
"0b0010100",
"0b0001000",
"0b0010100",
"0b0010100",
"0b0100010",
"0b0100010",
"0b0000000", --  ASCII(88) X
"0b0000000",
"0b0100010",
"0b0100010",
"0b0010100",
"0b0010100",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0001000",
"0b0000000", --  ASCII(89) Y
"0b0000000",
"0b0111110",
"0b0000010",
"0b0000010",
"0b0000100",
"0b0001000",
"0b0010000",
"0b0100000",
"0b0100000",
"0b0111110",
"0b0000000", --  ASCII(90) Z
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 91
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 92
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 93
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 94
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 95
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 96
"0b0000000",
"0b0000000",
"0b0011100",
"0b0000010",
"0b0011110",
"0b0100010",
"0b0100010",
"0b0011100",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII(97) a
"0b0000000",
"0b0100000",
"0b0100000",
"0b0100000",
"0b0111100",
"0b0100010",
"0b0100010",
"0b0111100",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII(98) b
"0b0000000",
"0b0000000",
"0b0011100",
"0b0100010",
"0b0100000",
"0b0100000",
"0b0100010",
"0b0011100",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII(99) c
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 100
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 101
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 102
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 103
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 104
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 105
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 106
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 107
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 108
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 109
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 110
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 111
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 112
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 113
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 114
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 115
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 116
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 117
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 118
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 119
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 120
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 121
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 122
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 123
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 124
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 125
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000", --  ASCII 126
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000",
"0b0000000" -- ASCII 127
}

isbin = false
width = 5
height = 7
from = 0
to = 254
bpc = 5

font = {
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
  0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
  0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
  0x18, 0x3C, 0x7E, 0x3C, 0x18,
  0x1C, 0x57, 0x7D, 0x57, 0x1C,
  0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
  0x00, 0x18, 0x3C, 0x18, 0x00,
  0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
  0x00, 0x18, 0x24, 0x18, 0x00,
  0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
  0x30, 0x48, 0x3A, 0x06, 0x0E,
  0x26, 0x29, 0x79, 0x29, 0x26,
  0x40, 0x7F, 0x05, 0x05, 0x07,
  0x40, 0x7F, 0x05, 0x25, 0x3F,
  0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
  0x7F, 0x3E, 0x1C, 0x1C, 0x08,
  0x08, 0x1C, 0x1C, 0x3E, 0x7F,
  0x14, 0x22, 0x7F, 0x22, 0x14,
  0x5F, 0x5F, 0x00, 0x5F, 0x5F,
  0x06, 0x09, 0x7F, 0x01, 0x7F,
  0x00, 0x66, 0x89, 0x95, 0x6A,
  0x60, 0x60, 0x60, 0x60, 0x60,
  0x94, 0xA2, 0xFF, 0xA2, 0x94,
  0x08, 0x04, 0x7E, 0x04, 0x08,
  0x10, 0x20, 0x7E, 0x20, 0x10,
  0x08, 0x08, 0x2A, 0x1C, 0x08,
  0x08, 0x1C, 0x2A, 0x08, 0x08,
  0x1E, 0x10, 0x10, 0x10, 0x10,
  0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
  0x30, 0x38, 0x3E, 0x38, 0x30,
  0x06, 0x0E, 0x3E, 0x0E, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x5F, 0x00, 0x00,
  0x00, 0x07, 0x00, 0x07, 0x00,
  0x14, 0x7F, 0x14, 0x7F, 0x14,
  0x24, 0x2A, 0x7F, 0x2A, 0x12,
  0x23, 0x13, 0x08, 0x64, 0x62,
  0x36, 0x49, 0x56, 0x20, 0x50,
  0x00, 0x08, 0x07, 0x03, 0x00,
  0x00, 0x1C, 0x22, 0x41, 0x00,
  0x00, 0x41, 0x22, 0x1C, 0x00,
  0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
  0x08, 0x08, 0x3E, 0x08, 0x08,
  0x00, 0x80, 0x70, 0x30, 0x00,
  0x08, 0x08, 0x08, 0x08, 0x08,
  0x00, 0x00, 0x60, 0x60, 0x00,
  0x20, 0x10, 0x08, 0x04, 0x02,
  0x3E, 0x51, 0x49, 0x45, 0x3E,  
  0x00, 0x42, 0x7F, 0x40, 0x00,  
  0x72, 0x49, 0x49, 0x49, 0x46,  
  0x21, 0x41, 0x49, 0x4D, 0x33,  
  0x18, 0x14, 0x12, 0x7F, 0x10,  
  0x27, 0x45, 0x45, 0x45, 0x39,  
  0x3C, 0x4A, 0x49, 0x49, 0x31,  
  0x41, 0x21, 0x11, 0x09, 0x07,  
  0x36, 0x49, 0x49, 0x49, 0x36,  
  0x46, 0x49, 0x49, 0x29, 0x1E,  
  0x00, 0x00, 0x14, 0x00, 0x00,
  0x00, 0x40, 0x34, 0x00, 0x00,
  0x00, 0x08, 0x14, 0x22, 0x41,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x00, 0x41, 0x22, 0x14, 0x08,
  0x02, 0x01, 0x59, 0x09, 0x06,
  0x3E, 0x41, 0x5D, 0x59, 0x4E,
  0x7C, 0x12, 0x11, 0x12, 0x7C,  
  0x7F, 0x49, 0x49, 0x49, 0x36,  
  0x3E, 0x41, 0x41, 0x41, 0x22,  
  0x7F, 0x41, 0x41, 0x41, 0x3E,  
  0x7F, 0x49, 0x49, 0x49, 0x41,  
  0x7F, 0x09, 0x09, 0x09, 0x01,  
  0x3E, 0x41, 0x41, 0x51, 0x73,  
  0x7F, 0x08, 0x08, 0x08, 0x7F,  
  0x00, 0x41, 0x7F, 0x41, 0x00,  
  0x20, 0x40, 0x41, 0x3F, 0x01,  
  0x7F, 0x08, 0x14, 0x22, 0x41,  
  0x7F, 0x40, 0x40, 0x40, 0x40,  
  0x7F, 0x02, 0x1C, 0x02, 0x7F,  
  0x7F, 0x04, 0x08, 0x10, 0x7F,  
  0x3E, 0x41, 0x41, 0x41, 0x3E,  
  0x7F, 0x09, 0x09, 0x09, 0x06,  
  0x3E, 0x41, 0x51, 0x21, 0x5E,  
  0x7F, 0x09, 0x19, 0x29, 0x46,  
  0x26, 0x49, 0x49, 0x49, 0x32,  
  0x03, 0x01, 0x7F, 0x01, 0x03,  
  0x3F, 0x40, 0x40, 0x40, 0x3F,  
  0x1F, 0x20, 0x40, 0x20, 0x1F,  
  0x3F, 0x40, 0x38, 0x40, 0x3F,  
  0x63, 0x14, 0x08, 0x14, 0x63,  
  0x03, 0x04, 0x78, 0x04, 0x03,  
  0x61, 0x59, 0x49, 0x4D, 0x43,  
  0x00, 0x7F, 0x41, 0x41, 0x41,
  0x02, 0x04, 0x08, 0x10, 0x20,
  0x00, 0x41, 0x41, 0x41, 0x7F,
  0x04, 0x02, 0x01, 0x02, 0x04,
  0x40, 0x40, 0x40, 0x40, 0x40,
  0x00, 0x03, 0x07, 0x08, 0x00,
  0x20, 0x54, 0x54, 0x78, 0x40,  
  0x7F, 0x28, 0x44, 0x44, 0x38,  
  0x38, 0x44, 0x44, 0x44, 0x28,  
  0x38, 0x44, 0x44, 0x28, 0x7F,  
  0x38, 0x54, 0x54, 0x54, 0x18,  
  0x00, 0x08, 0x7E, 0x09, 0x02,  
  0x18, 0xA4, 0xA4, 0x9C, 0x78,  
  0x7F, 0x08, 0x04, 0x04, 0x78,  
  0x00, 0x44, 0x7D, 0x40, 0x00,  
  0x20, 0x40, 0x40, 0x3D, 0x00,  
  0x7F, 0x10, 0x28, 0x44, 0x00,  
  0x00, 0x41, 0x7F, 0x40, 0x00,  
  0x7C, 0x04, 0x78, 0x04, 0x78,  
  0x7C, 0x08, 0x04, 0x04, 0x78,  
  0x38, 0x44, 0x44, 0x44, 0x38,  
  0xFC, 0x18, 0x24, 0x24, 0x18,  
  0x18, 0x24, 0x24, 0x18, 0xFC,  
  0x7C, 0x08, 0x04, 0x04, 0x08,  
  0x48, 0x54, 0x54, 0x54, 0x24,  
  0x04, 0x04, 0x3F, 0x44, 0x24,  
  0x3C, 0x40, 0x40, 0x20, 0x7C,  
  0x1C, 0x20, 0x40, 0x20, 0x1C,  
  0x3C, 0x40, 0x30, 0x40, 0x3C,  
  0x44, 0x28, 0x10, 0x28, 0x44,  
  0x4C, 0x90, 0x90, 0x90, 0x7C,  
  0x44, 0x64, 0x54, 0x4C, 0x44,  
  0x00, 0x08, 0x36, 0x41, 0x00,
  0x00, 0x00, 0x77, 0x00, 0x00,
  0x00, 0x41, 0x36, 0x08, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x02,
  0x3C, 0x26, 0x23, 0x26, 0x3C,
  0x1E, 0xA1, 0xA1, 0x61, 0x12,
  0x3A, 0x40, 0x40, 0x20, 0x7A,
  0x38, 0x54, 0x54, 0x55, 0x59,
  0x21, 0x55, 0x55, 0x79, 0x41,
  0x21, 0x54, 0x54, 0x78, 0x41,
  0x21, 0x55, 0x54, 0x78, 0x40,
  0x20, 0x54, 0x55, 0x79, 0x40,
  0x0C, 0x1E, 0x52, 0x72, 0x12,
  0x39, 0x55, 0x55, 0x55, 0x59,
  0x39, 0x54, 0x54, 0x54, 0x59,
  0x39, 0x55, 0x54, 0x54, 0x58,
  0x00, 0x00, 0x45, 0x7C, 0x41,
  0x00, 0x02, 0x45, 0x7D, 0x42,
  0x00, 0x01, 0x45, 0x7C, 0x40,
  0xF0, 0x29, 0x24, 0x29, 0xF0,
  0xF0, 0x28, 0x25, 0x28, 0xF0,
  0x7C, 0x54, 0x55, 0x45, 0x00,
  0x20, 0x54, 0x54, 0x7C, 0x54,
  0x7C, 0x0A, 0x09, 0x7F, 0x49,
  0x32, 0x49, 0x49, 0x49, 0x32,
  0x32, 0x48, 0x48, 0x48, 0x32,
  0x32, 0x4A, 0x48, 0x48, 0x30,
  0x3A, 0x41, 0x41, 0x21, 0x7A,
  0x3A, 0x42, 0x40, 0x20, 0x78,
  0x00, 0x9D, 0xA0, 0xA0, 0x7D,
  0x39, 0x44, 0x44, 0x44, 0x39,
  0x3D, 0x40, 0x40, 0x40, 0x3D,
  0x3C, 0x24, 0xFF, 0x24, 0x24,
  0x48, 0x7E, 0x49, 0x43, 0x66,
  0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
  0xFF, 0x09, 0x29, 0xF6, 0x20,
  0xC0, 0x88, 0x7E, 0x09, 0x03,
  0x20, 0x54, 0x54, 0x79, 0x41,
  0x00, 0x00, 0x44, 0x7D, 0x41,
  0x30, 0x48, 0x48, 0x4A, 0x32,
  0x38, 0x40, 0x40, 0x22, 0x7A,
  0x00, 0x7A, 0x0A, 0x0A, 0x72,
  0x7D, 0x0D, 0x19, 0x31, 0x7D,
  0x26, 0x29, 0x29, 0x2F, 0x28,
  0x26, 0x29, 0x29, 0x29, 0x26,
  0x30, 0x48, 0x4D, 0x40, 0x20,
  0x38, 0x08, 0x08, 0x08, 0x08,
  0x08, 0x08, 0x08, 0x08, 0x38,
  0x2F, 0x10, 0xC8, 0xAC, 0xBA,
  0x2F, 0x10, 0x28, 0x34, 0xFA,
  0x00, 0x00, 0x7B, 0x00, 0x00,
  0x08, 0x14, 0x2A, 0x14, 0x22,
  0x22, 0x14, 0x2A, 0x14, 0x08,
  0xAA, 0x00, 0x55, 0x00, 0xAA,
  0xAA, 0x55, 0xAA, 0x55, 0xAA,
  0x00, 0x00, 0x00, 0xFF, 0x00,
  0x10, 0x10, 0x10, 0xFF, 0x00,
  0x14, 0x14, 0x14, 0xFF, 0x00,
  0x10, 0x10, 0xFF, 0x00, 0xFF,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x14, 0x14, 0x14, 0xFC, 0x00,
  0x14, 0x14, 0xF7, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x14, 0x14, 0xF4, 0x04, 0xFC,
  0x14, 0x14, 0x17, 0x10, 0x1F,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0x1F, 0x00,
  0x10, 0x10, 0x10, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0xF0, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x10,
  0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x10, 0xFF, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x14,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0x00, 0x1F, 0x10, 0x17,
  0x00, 0x00, 0xFC, 0x04, 0xF4,
  0x14, 0x14, 0x17, 0x10, 0x17,
  0x14, 0x14, 0xF4, 0x04, 0xF4,
  0x00, 0x00, 0xFF, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0xF7, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x17, 0x14,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0xF4, 0x14,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x00, 0x00, 0x1F, 0x10, 0x1F,
  0x00, 0x00, 0x00, 0x1F, 0x14,
  0x00, 0x00, 0x00, 0xFC, 0x14,
  0x00, 0x00, 0xF0, 0x10, 0xF0,
  0x10, 0x10, 0xFF, 0x10, 0xFF,
  0x14, 0x14, 0x14, 0xFF, 0x14,
  0x10, 0x10, 0x10, 0x1F, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0x10,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF,
  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
  0x38, 0x44, 0x44, 0x38, 0x44,
  0x7C, 0x2A, 0x2A, 0x3E, 0x14,
  0x7E, 0x02, 0x02, 0x06, 0x06,
  0x02, 0x7E, 0x02, 0x7E, 0x02,
  0x63, 0x55, 0x49, 0x41, 0x63,
  0x38, 0x44, 0x44, 0x3C, 0x04,
  0x40, 0x7E, 0x20, 0x1E, 0x20,
  0x06, 0x02, 0x7E, 0x02, 0x02,
  0x99, 0xA5, 0xE7, 0xA5, 0x99,
  0x1C, 0x2A, 0x49, 0x2A, 0x1C,
  0x4C, 0x72, 0x01, 0x72, 0x4C,
  0x30, 0x4A, 0x4D, 0x4D, 0x30,
  0x30, 0x48, 0x78, 0x48, 0x30,
  0xBC, 0x62, 0x5A, 0x46, 0x3D,
  0x3E, 0x49, 0x49, 0x49, 0x00,
  0x7E, 0x01, 0x01, 0x01, 0x7E,
  0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
  0x44, 0x44, 0x5F, 0x44, 0x44,
  0x40, 0x51, 0x4A, 0x44, 0x40,
  0x40, 0x44, 0x4A, 0x51, 0x40,
  0x00, 0x00, 0xFF, 0x01, 0x03,
  0xE0, 0x80, 0xFF, 0x00, 0x00,
  0x08, 0x08, 0x6B, 0x6B, 0x08,
  0x36, 0x12, 0x36, 0x24, 0x36,
  0x06, 0x0F, 0x09, 0x0F, 0x06,
  0x00, 0x00, 0x18, 0x18, 0x00,
  0x00, 0x00, 0x10, 0x10, 0x00,
  0x30, 0x40, 0xFF, 0x01, 0x01,
  0x00, 0x1F, 0x01, 0x01, 0x1E,
  0x00, 0x19, 0x1D, 0x17, 0x12,
  0x00, 0x3C, 0x3C, 0x3C, 0x3C,
  0x00, 0x00, 0x00, 0x00, 0x00,
  }

local hex2bin = {
        ["0"] = "0000",
        ["1"] = "0001",
        ["2"] = "0010",
        ["3"] = "0011",
        ["4"] = "0100",
        ["5"] = "0101",
        ["6"] = "0110",
        ["7"] = "0111",
        ["8"] = "1000",
        ["9"] = "1001",
        ["a"] = "1010",
        ["b"] = "1011",
        ["c"] = "1100",
        ["d"] = "1101",
        ["e"] = "1110",
        ["f"] = "1111"
        }


local bin2hex = {
    ["0000"] = "0",
    ["0001"] = "1",
    ["0010"] = "2",
    ["0011"] = "3",
    ["0100"] = "4",
    ["0101"] = "5",
    ["0110"] = "6",
    ["0111"] = "7",
    ["1000"] = "8",
    ["1001"] = "9",
    ["1010"] = "A",
    ["1011"] = "B",
    ["1100"] = "C",
    ["1101"] = "D",
    ["1110"] = "E",
    ["1111"] = "F"
}

local bin2oct = {
    ["000"] = "0",
    ["001"] = "1",
    ["010"] = "2",
    ["011"] = "3",
    ["100"] = "4",
    ["101"] = "5",
    ["110"] = "6",
    ["111"] = "7"
}

local oct2bin = {
    ["0"] = "000",
    ["1"] = "001",
    ["2"] = "010",
    ["3"] = "011",
    ["4"] = "100",
    ["5"] = "101",
    ["6"] = "110",
    ["7"] = "111"
}


-- These functions are big-endian and take up to 32 bits

-- Hex2Bin
-- Bin2Hex
-- Hex2Dec
-- Dec2Hex
-- Bin2Dec
-- Dec2Bin


function Hex2Bin(s)

-- s -> hexadecimal string

local ret = ""
local i = 0


    for i in string.gfind(s, ".") do
        i = string.lower(i)

        ret = ret..hex2bin[i]

    end

    return ret
end

function Bin2Hex(s)

-- s -> binary string

local l = 0
local h = ""
local b = ""
local rem

l = string.len(s)
rem = l % 4
l = l-1
h = ""

    -- need to prepend zeros to eliminate mod 4
    if (rem > 0) then
        s = string.rep("0", 4 - rem)..s
    end

    for i = 1, l, 4 do
        b = string.sub(s, i, i+3)
        h = h..bin2hex[b]
    end

    return h

end

function Bin2Oct(s)

-- s -> binary string

local l = 0
local h = ""
local b = ""
local rem

l = string.len(s)
rem = l % 3
l = l-1
h = ""

    -- need to prepend zeros to eliminate mod 3
    if (rem > 0) then
        s = string.rep("0", 3 - rem)..s
    end

    for i = 1, l, 3 do
        b = string.sub(s, i, i+2)
        h = h..bin2oct[b]
    end

    return h

end

function Oct2Bin(s)

-- s -> octal string

local ret = ""
local i = 0


    for i in string.gfind(s, ".") do
        i = string.lower(i)

        ret = ret..oct2bin[i]

    end

    return ret
end

function Bin2Dec(s)

-- s -> binary string

local num = 0
local ex = string.len(s) - 1
local l = 0

    l = ex + 1
    for i = 1, l do
        b = string.sub(s, i, i)
        if b == "1" then
            num = num + 2^ex
        end
        ex = ex - 1
    end

    return string.format("%u", num)

end



function Dec2Bin(s, num)

-- s -> Base10 string
-- num  -> string length to extend to

local n

    if (num == nil) then
        n = 0
    else
        n = num
    end

    s = string.format("%x", s)

    s = Hex2Bin(s)

    while string.len(s) < n do
        s = "0"..s
    end

    return s

end




function Hex2Dec(s)

-- s -> hexadecimal string

    local s = Hex2Bin(s)

    return Bin2Dec(s)

end



function Dec2Hex(s)

-- s -> Base10 string

    s = string.format("%x", s)

    return s

end

function Hex2Oct(s)

-- s -> hexadecimal string

    local s = Hex2Bin(s)

    return Bin2Oct(s)

end



function Oct2Hex(s)

-- s -> Base8 string

    local s = Oct2Bin(s)

    return Bin2Hex(s)

end

function Dec2Oct(s)

-- s -> decimal string

    s = string.format("%o", s)

    return s

end



function Oct2Dec(s)

-- s -> Base10 string

    local s = Oct2Bin(s)

    return Bin2Dec(s)

end

-- These functions are big-endian and will extend to 32 bits

-- BMAnd
-- BMNAnd
-- BMOr
-- BMXOr
-- BMNot


function BMAnd(v, m)

-- v    -> hex string to be masked
-- m    -> hex string mask

-- s    -> hex string as masked

-- bv   -> binary string of v
-- bm   -> binary string mask

local bv = Hex2Bin(v)
local bm = Hex2Bin(m)

local i = 0
local s = ""

        while (string.len(bv) < 32) do
                bv = "0000"..bv
        end

        while (string.len(bm) < 32) do
                bm = "0000"..bm
        end


        for i = 1, 32 do
                cv = string.sub(bv, i, i)
                cm = string.sub(bm, i, i)
                if cv == cm then
                        if cv == "1" then
                                s = s.."1"
                        else
                                s = s.."0"
                        end
                else
                        s = s.."0"

                end
        end

        return Bin2Hex(s)

end


function BMNAnd(v, m)

-- v    -> hex string to be masked
-- m    -> hex string mask

-- s    -> hex string as masked

-- bv   -> binary string of v
-- bm   -> binary string mask

local bv = Hex2Bin(v)
local bm = Hex2Bin(m)

local i = 0
local s = ""

        while (string.len(bv) < 32) do
                bv = "0000"..bv
        end

        while (string.len(bm) < 32) do
                bm = "0000"..bm
        end


        for i = 1, 32 do
                cv = string.sub(bv, i, i)
                cm = string.sub(bm, i, i)
                if cv == cm then
                        if cv == "1" then
                                s = s.."0"
                        else
                                s = s.."1"
                        end
                else
                        s = s.."1"

                end
        end

        return Bin2Hex(s)

end



function BMOr(v, m)

-- v    -> hex string to be masked
-- m    -> hex string mask

-- s    -> hex string as masked

-- bv   -> binary string of v
-- bm   -> binary string mask

local bv = Hex2Bin(v)
local bm = Hex2Bin(m)

local i = 0
local s = ""

        while (string.len(bv) < 32) do
                bv = "0000"..bv
        end

        while (string.len(bm) < 32) do
                bm = "0000"..bm
        end


        for i = 1, 32 do
                cv = string.sub(bv, i, i)
                cm = string.sub(bm, i, i)
                if cv == "1" then
                                s = s.."1"
                elseif cm == "1" then
                                s = s.."1"
                else
                        s = s.."0"
                end
        end

        return Bin2Hex(s)

end

function BMXOr(v, m)

-- v    -> hex string to be masked
-- m    -> hex string mask

-- s    -> hex string as masked

-- bv   -> binary string of v
-- bm   -> binary string mask

local bv = Hex2Bin(v)
local bm = Hex2Bin(m)

local i = 0
local s = ""

        while (string.len(bv) < 32) do
                bv = "0000"..bv
        end

        while (string.len(bm) < 32) do
                bm = "0000"..bm
        end


        for i = 1, 32 do
                cv = string.sub(bv, i, i)
                cm = string.sub(bm, i, i)
                if cv == "1" then
                        if cm == "0" then
                                s = s.."1"
                        else
                                s = s.."0"
                        end
                elseif cm == "1" then
                        if cv == "0" then
                                s = s.."1"
                        else
                                s = s.."0"
                        end
                else
                        -- cv and cm == "0"
                        s = s.."0"
                end
        end

        return Bin2Hex(s)

end


function BMNot(v, m)

-- v    -> hex string to be masked
-- m    -> hex string mask

-- s    -> hex string as masked

-- bv   -> binary string of v
-- bm   -> binary string mask

local bv = Hex2Bin(v)
local bm = Hex2Bin(m)

local i = 0
local s = ""

        while (string.len(bv) < 32) do
                bv = "0000"..bv
        end

        while (string.len(bm) < 32) do
                bm = "0000"..bm
        end


        for i = 1, 32 do
                cv = string.sub(bv, i, i)
                cm = string.sub(bm, i, i)
                if cm == "1" then
                        if cv == "1" then
                                -- turn off
                                s = s.."0"
                        else
                                -- turn on
                                s = s.."1"
                        end
                else
                        -- leave untouched
                        s = s..cv

                end
        end

        return Bin2Hex(s)

end


-- these functions shift right and left, adding zeros to lost or gained bits
-- returned values are 32 bits long

-- BShRight(v, nb)
-- BShLeft(v, nb)


function BShRight(v, nb)

-- v    -> hexstring value to be shifted
-- nb   -> number of bits to shift to the right

-- s    -> binary string of v

local s = Hex2Bin(v)

        while (string.len(s) < 32) do
                s = "0000"..s
        end

        s = string.sub(s, 1, 32 - nb)

        while (string.len(s) < 32) do
                s = "0"..s
        end

        return Bin2Hex(s)

end

function BShLeft(v, nb)

-- v    -> hexstring value to be shifted
-- nb   -> number of bits to shift to the right

-- s    -> binary string of v

local s = Hex2Bin(v)

        while (string.len(s) < 32) do
                s = "0000"..s
        end

        s = string.sub(s, nb + 1, 32)

        while (string.len(s) < 32) do
                s = s.."0"
        end

        return Bin2Hex(s)

end

file = io.open("font","wb")

file:write(string.char(width))
file:write(string.char(height))
file:write(string.char(bpc))
file:write(string.char(from))
file:write(string.char(to))

for i=1,#font do
    if (isbin) then
	file:write(string.char(Bin2Dec(font[i])))
    else
	file:write(string.char(font[i]))
    end
end

file:close()